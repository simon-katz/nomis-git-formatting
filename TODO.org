* nomis-git-formatting
** Done
** To do
*** Create a README
*** Process these notes into documentation
;;;; DONE What happens when we need to force-push?
;;;;      The sequence of commits we get will be empty.

;;;; TODO Test with a force-push.

;;;; DONE What about command-line args?
;;;;      - Grrr! Would be so much better if you could use pre and post hooks.
;;;;      - Ah, here's an idea:
;;;         - But I don't think it worls, because there will be error exits
;;;;        - Do `git push`
;;;;          - So you have all the args that `git push` has
;;;;        - The pre-push hooks calls this script and passes in the parameters.
;;;;          - This script either
;;;;            - does no-hooks when calling git push
;;;;            - creates a special file fir the pre-push hook to see
;;;;        - This script exits
;;;;          - Maybe an error exit
;;;;            - but with a message to the user saying all OK
;;;;          - Maybe a 0 exit
;;;;            - But then it will try to push again I guess
;;;;              - What will be the result of that? An error?
;;;;          - And an error exit will confuse callers, so not good
;;;;        - Another idea:
;;;;          - In this script
;;;;            - Create a special file
;;;;            - Call `git push` with all of this script's args
;;;;          - In pre-push hook
;;;;            - Check for the special file
;;;;            - Get the parameters and store them in a special file
;;;;            - exit 1 so that the push doesn't happen
;;;;          - In this script
;;;;            - Grab the stored parameters
;;;;            - So now you have the list of commits you need
;;;;            - After rewriting commits, call git push again
;;;;          - Q.
;;;;            - Think about all the possible args to git push.
;;;;              - You're not going to understand everything.
;;;;              - Maybe only allow a limited set of args
*** TODO Are you formatting all files?
**** Can you format only some?
***** Maybe sometimes that's possible
***** Need to think (and create / add to design notes)
*** TODO Parameterise the formatter
**** Maybe
***** would need to parameterise these as well:
****** whether individual files can be passed to the formatter
****** file types
**** As is done at https://stackoverflow.com/questions/31057527/git-pre-commit-hook-to-format-and-re-add-files-at-the-same-time/49265008#49265008
*** TODO At start, print the current sha and the stash name
**** Also create a script file to reset things
*** DONE Have a separate `format-unpushed-commits` script
**** Useful to have as a separate thing
***** But on push will still have to check all the commits
*** TODO You want to rewrite without changing the commit hashes
**** I think I saw something that lets you update objects in git
**** Oh, that's not what you had thought
***** https://stackoverflow.com/questions/31057527/git-pre-commit-hook-to-format-and-re-add-files-at-the-same-time/49265008#49265008
****** you can:
******* get the file from index as a tmp
******* format the tmp
******* replace the entry in index
**** Is it OK to replace commits at push time (as you are doing)?
**** So maybe you have to reformat on commit
***** You have both pre-commit and post-commit hooks
****** so less jiggery-pokery than you have now
